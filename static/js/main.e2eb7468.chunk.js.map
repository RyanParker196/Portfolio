{"version":3,"sources":["components/Nav.js","components/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["MyNav","Navbar","bg","variant","Brand","href","Nav","className","Link","target","MyCarousel","Carousel","Item","src","alt","Caption","Button","App","Image","roundedCircle","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAKe,SAASA,IACpB,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,YAAYC,QAAQ,QAC3B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,QACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,8CAA8CI,OAAO,UAApE,YACA,kBAACH,EAAA,EAAIE,KAAL,CAAUH,KAAK,WAAf,UACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,YAAf,a,4BCRD,SAASK,IAEtB,OACE,kBAACC,EAAA,EAAD,CAAUJ,UAAU,YAClB,kBAACI,EAAA,EAASC,KAAV,KACE,yBACEC,IAAI,eACJN,UAAU,uBACVO,IAAI,cACJZ,GAAG,UAEL,kBAACS,EAAA,EAASI,QAAV,KACE,kEACA,mIAIA,kBAACC,EAAA,EAAD,CACEP,OAAO,SACPN,QAAQ,UACRE,KAAK,8DAHP,kB,UCfWY,E,iLAEjB,OACE,yBAAKV,UAAU,UACb,yBAAKA,UAAU,UACb,kBAACW,EAAA,EAAD,CAAOhB,GAAG,OAAOW,IAAI,UAAUC,IAAI,oBAAoBK,eAAa,KAEtE,kBAAC,EAAD,MACA,iCAKA,kBAAC,EAAD,W,GAbyBC,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e2eb7468.chunk.js","sourcesContent":["import React from 'react'\r\n//! TODO: finish implementing search feature\r\n// import {Navbar, Form, FormControl, Button, Nav} from 'react-bootstrap'\r\nimport { Navbar , Nav } from 'react-bootstrap'\r\n\r\nexport default function MyNav() {\r\n    return (\r\n        <Navbar bg=\"secondary\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">Home</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"https://www.linkedin.com/in/ryan-parker196/\" target=\"_blank\" >LinkedIn</Nav.Link>\r\n                <Nav.Link href=\"#Resume\">Resume</Nav.Link>\r\n                <Nav.Link href=\"#Contact\">Contact</Nav.Link>\r\n            </Nav>\r\n            {/* <Form inline>\r\n                <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                <Button variant=\"outline-light\">Search</Button>\r\n            </Form> */}\r\n        </Navbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport { Button } from 'react-bootstrap'\r\n\r\nexport default function MyCarousel() {\r\n\r\n  return (\r\n    <Carousel className=\"Carousel\">\r\n      <Carousel.Item>\r\n        <img\r\n          src=\"/haskell.png\"\r\n          className=\"d-block w-100 poster\"\r\n          alt=\"First slide\"\r\n          bg=\"black\"\r\n        />\r\n        <Carousel.Caption>\r\n          <h3>Automatic Differentaion in Haskell</h3>\r\n          <p>\r\n            Click the links below to see the source code\r\n            or learn more information about Automatic Differentaion\r\n          </p>\r\n          <Button \r\n            target=\"_blank\" \r\n            variant=\"success\" \r\n            href=\"https://github.com/RyanParker196/Automatic-Differentiation\" >\r\n            Source Code\r\n          </Button>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      {/* <Carousel.Item>\r\n        <img\r\n          className=\"d-block w-100 poster\"\r\n          src=\"/git.jpg\"\r\n          alt=\"Third slide\"\r\n        />\r\n\r\n        <Carousel.Caption>\r\n          <h3>Second slide label</h3>\r\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n        </Carousel.Caption>\r\n      </Carousel.Item>\r\n      <Carousel.Item>\r\n        <img\r\n          className=\"d-block w-100 poster\"\r\n          src=\"/git2.jpeg\"\r\n          alt=\"Third slide\"\r\n        />\r\n        <p> test</p>\r\n        <Carousel.Caption>\r\n          <h3>Third slide label</h3>\r\n          <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\r\n        </Carousel.Caption>\r\n      </Carousel.Item> */}\r\n    </Carousel>\r\n  )\r\n}","import React, { Component } from 'react';\r\nimport Nav from './components/Nav'\r\nimport Image from 'react-bootstrap/Image'\r\nimport Carousel from './components/Carousel'\r\nimport './App.css'\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BigDiv\">\r\n        <div className=\"Avatar\">\r\n          <Image bg=\"dark\" src=\"/me.jpg\" alt=\"error loading img\" roundedCircle />\r\n        </div>\r\n        <Nav />\r\n        <header >\r\n          {/* <h2 className=\"Greeting\">\r\n            View my recent projects by clicking any of the links below\r\n          </h2> */}\r\n        </header>\r\n        <Carousel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './custom.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}